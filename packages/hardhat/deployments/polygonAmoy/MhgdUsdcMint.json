{
  "address": "0x4B4eb09800e577471B903286f5d7BD2BeFB5d31a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NothingToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SWAP_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Total_AllTime_Minted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Total_Mhgd_Swap_Transactions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Total_Mint_Transactions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Total_Usdc_Swap_Transactions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesCollected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mhgdReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mhgdToken",
      "outputs": [
        {
          "internalType": "contract IMhgdToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintedAtBlock",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasMintedBefore",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "minter_AllTime_Minted",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mhgdAmount",
          "type": "uint256"
        }
      ],
      "name": "swapMhgd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "name": "swapusdc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc51343888d88951d54a64a35c2d4e70f63352956faa50cf14416cc1bf9b608c5",
  "receipt": {
    "to": null,
    "from": "0xEf353eC37ed86CF28cfb29925748B202B51110C6",
    "contractAddress": "0x4B4eb09800e577471B903286f5d7BD2BeFB5d31a",
    "transactionIndex": 4,
    "gasUsed": "1108518",
    "logsBloom": "0x
    "blockHash": "0xfc2bea3e67eba620c148f722cba7fdf2b3d3198bb42bbd5e11cce67e7ee19ac8",
    "transactionHash": "0xc51343888d88951d54a64a35c2d4e70f63352956faa50cf14416cc1bf9b608c5",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 7950833,
        "transactionHash": "0xc51343888d88951d54a64a35c2d4e70f63352956faa50cf14416cc1bf9b608c5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ef353ec37ed86cf28cfb29925748b202b51110c6",
          "0x000000000000000000000000915a2284d28bd93de7d6f31173b981204bb666e6"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000005e849706cfa000000000000000000000000000000000000000000000000000a4a8dea7a9e5f970000000000000000000000000000000000000000000001a6aa7636ad525efc090000000000000000000000000000000000000000000000000a44a5a10a3165970000000000000000000000000000000000000000000001a6aa7c1ef6c2cbf609",
        "logIndex": 10,
        "blockHash": "0xfc2bea3e67eba620c148f722cba7fdf2b3d3198bb42bbd5e11cce67e7ee19ac8"
      }
    ],
    "blockNumber": 7950833,
    "cumulativeGasUsed": "1524842",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEf353eC37ed86CF28cfb29925748B202B51110C6"
  ],
  "numDeployments": 1,
  "solcInputHash": "ab87f9cd9f293fb480768475a3c7587b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SWAP_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Total_AllTime_Minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Total_Mhgd_Swap_Transactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Total_Mint_Transactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Total_Usdc_Swap_Transactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mhgdReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mhgdToken\",\"outputs\":[{\"internalType\":\"contract IMhgdToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasMintedBefore\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minter_AllTime_Minted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mhgdAmount\",\"type\":\"uint256\"}],\"name\":\"swapMhgd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"swapusdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"mint(uint256)\":{\"details\":\"Mints an equivalent amount of MhgdToken for the transferred USDC \"},\"swapMhgd(uint256)\":{\"details\":\"Swaps the MhgdToken to usdc less the swap fee.\"},\"swapusdc(uint256)\":{\"details\":\"Swaps the usdc to MHGD plus the swap fee 0.01 usdc.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MhgdUsdcMint.sol\":\"MhgdUsdcMint\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/MhgdUsdcMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface IMhgdToken {\\n    function mint(address, uint256) external;\\n    function balanceOf(address, uint256) external;\\n    function transfer(address, uint256) external;\\n}\\n//Allows for the minting of MHGD stable coin and locks USCD into the contract. \\n\\n//In production we will remove the withdraw function\\n//All MHGD will be created by the two mint contracts for usdc and USDC\\n//Liquidity pools can then be created on DEXs using minted MHGD with 1:1 ratio for usdc and USDC \\ncontract MhgdUsdcMint is ReentrancyGuard {\\n    address public immutable owner;\\n      struct Minter {\\n        uint256 minted;\\n        uint256 mintedAtBlock;\\n        bool hasMintedBefore;\\n        uint256 minter_AllTime_Minted;\\n    }\\n\\n    error NothingToWithdraw(); // Used when trying to withdraw Ether but there's nothing to withdraw.\\n\\n    uint256 public constant SWAP_FEE = 10; // 0.01 Usdc\\n    uint256 public Total_Mint_Transactions = 0;\\n    uint256 public Total_Mhgd_Swap_Transactions = 0;\\n    uint256 public Total_Usdc_Swap_Transactions = 0;\\n    uint256 public Total_AllTime_Minted;\\n    mapping (address => Minter) public minters;\\n\\n    IERC20 public usdcToken;\\n    IMhgdToken public mhgdToken;\\n    uint256 public usdcReserve;\\n    uint256 public mhgdReserve;\\n    uint256 public feesCollected;\\n    \\n    constructor (address _owner) {\\n        // Address of the USDC token on Sepolia\\n        usdcToken = IERC20(0x41E94Eb019C0762f9Bfcf9Fb1E58725BfB0e7582);\\n        // Address of the MhgdToken contract\\n        mhgdToken = IMhgdToken(0x9460b9fed18Bd5aF7b99d88aaE7723cA331a7D14);\\n        owner = _owner;\\n    }\\n\\n    /**\\n     * @dev Mints an equivalent amount of MhgdToken for the transferred USDC \\n     */\\n    function mint(uint256 usdcAmount) external  {\\n        require(usdcToken.balanceOf(msg.sender) >= 0, \\\"You need more USDC to Mint MHGD Tokens SORRY!\\\");\\n        require(usdcToken.transferFrom(msg.sender, address(this), usdcAmount), \\\"Transfer of USDC failed\\\");\\n        mhgdToken.mint(msg.sender, usdcAmount * 1000000000000);\\n        minters[msg.sender].minted += usdcAmount * 1000000000000;\\n        minters[msg.sender].mintedAtBlock = block.timestamp;\\n        minters[msg.sender].hasMintedBefore = true;\\n        minters[msg.sender].minter_AllTime_Minted += usdcAmount * 1000000000000;\\n        Total_AllTime_Minted += usdcAmount * 1000000000000;\\n        Total_Mint_Transactions += 1;\\n        usdcReserve += usdcAmount;\\n    }\\n\\n    /**\\n     * @dev Swaps the MhgdToken to usdc less the swap fee.\\n     */\\n    function swapMhgd(uint256 mhgdAmount) external nonReentrant {\\n        require(usdcToken.balanceOf(address(this)) >= (mhgdAmount / 1000000000000 - SWAP_FEE), \\\"Not enough usdc in reserve\\\");\\n        require(IERC20(address(mhgdToken)).transferFrom(msg.sender, address(this), mhgdAmount + SWAP_FEE), \\\"Transfer of MHGD failed\\\");\\n        require(usdcToken.transfer(msg.sender, mhgdAmount / 1000000000000 - SWAP_FEE), \\\"Transfer of usdc failed\\\");\\n        usdcReserve -= mhgdAmount / 1000000000000;\\n        mhgdReserve += mhgdAmount;\\n        feesCollected += SWAP_FEE;\\n        usdcReserve += SWAP_FEE;\\n        Total_Mhgd_Swap_Transactions += 1;\\n    }\\n \\n      /**\\n     * @dev Swaps the usdc to MHGD plus the swap fee 0.01 usdc.\\n     */\\n    function swapusdc(uint256 usdcAmount) external nonReentrant {\\n        require(usdcToken.balanceOf(msg.sender) >= usdcAmount + SWAP_FEE, \\\"You need more usdc to Swap for MHGD Tokens SORRY!\\\");\\n        require(usdcToken.transferFrom(msg.sender, address(this), usdcAmount + SWAP_FEE), \\\"Transfer of usdc failed\\\");\\n        mhgdToken.transfer(msg.sender, usdcAmount * 1000000000000);\\n        usdcReserve += usdcAmount;\\n        usdcReserve += SWAP_FEE;\\n        feesCollected += SWAP_FEE;\\n        mhgdReserve -= usdcAmount * 1000000000000;\\n        Total_Usdc_Swap_Transactions += 1;\\n    }\\n    \\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n    // Should be removed in production so liquidity is locked in contract it is add here for testing contract.\\n     function withdrawToken(\\n        address _beneficiary,\\n        address _token\\n    ) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount == 0) revert NothingToWithdraw();\\n        IERC20(_token).transfer(_beneficiary, amount);\\n    }\\n\\n}\",\"keccak256\":\"0xcb3fb79cf452bd2e393969c916fe342aa9e47e5b93bcfcd74c6548034ef58069\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260006001556000600255600060035534801561001f57600080fd5b506040516112c93803806112c983398101604081905261003e9161009c565b6001600055600680546001600160a01b03199081167341e94eb019c0762f9bfcf9fb1e58725bfb0e75821790915560078054909116739460b9fed18bd5af7b99d88aae7723ca331a7d141790556001600160a01b03166080526100cc565b6000602082840312156100ae57600080fd5b81516001600160a01b03811681146100c557600080fd5b9392505050565b6080516111db6100ee600039600081816101b601526102b201526111db6000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063c504b77111610066578063c504b77114610214578063e88493be14610227578063f071db5a14610230578063f46eccc41461023957600080fd5b80638da5cb5b146101b1578063a0712d68146101d8578063bdf4a5d8146101eb578063c2d65935146101f457600080fd5b80636eaa4c52116100d35780636eaa4c5214610184578063768aebde1461018d57806377b86de41461019557806388bbf88b1461019e57600080fd5b806311eac855146101055780633aeac4e11461014f5780635275c56a146101645780636a5809cc1461017b575b600080fd5b6006546101259073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61016261015d366004611078565b61029a565b005b61016d60035481565b604051908152602001610146565b61016d60085481565b61016d60095481565b61016d600a81565b61016d60045481565b6101626101ac3660046110ab565b610448565b6101257f000000000000000000000000000000000000000000000000000000000000000081565b6101626101e63660046110ab565b61085f565b61016d60025481565b6007546101259073ffffffffffffffffffffffffffffffffffffffff1681565b6101626102223660046110ab565b610c45565b61016d60015481565b61016d600a5481565b6102746102473660046110c4565b60056020526000908152604090208054600182015460028301546003909301549192909160ff9091169084565b604080519485526020850193909352901515918301919091526060820152608001610146565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146102dc57600080fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d91906110e6565b9050806000036103a9576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af115801561041e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044291906110ff565b50505050565b610450610fdc565b600a61046164e8d4a5100083611150565b61046b919061118b565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156104d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fd91906110e6565b101561056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4e6f7420656e6f756768207573646320696e207265736572766500000000000060448201526064015b60405180910390fd5b60075473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330610595600a866111a4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526064016020604051808303816000875af115801561060e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063291906110ff565b610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e73666572206f66204d484744206661696c65640000000000000000006044820152606401610561565b60065473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600a6106c864e8d4a5100086611150565b6106d2919061118b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044016020604051808303816000875af1158015610742573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076691906110ff565b6107cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e73666572206f662075736463206661696c65640000000000000000006044820152606401610561565b6107db64e8d4a5100082611150565b600860008282546107ec919061118b565b92505081905550806009600082825461080591906111a4565b92505081905550600a80600082825461081e91906111a4565b92505081905550600a6008600082825461083891906111a4565b9250508190555060016002600082825461085291906111a4565b9091555050600160005550565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156108ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f291906110e6565b1015610980576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f596f75206e656564206d6f7265205553444320746f204d696e74204d4847442060448201527f546f6b656e7320534f52525921000000000000000000000000000000000000006064820152608401610561565b6006546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af11580156109fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2191906110ff565b610a87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e73666572206f662055534443206661696c65640000000000000000006044820152606401610561565b60075473ffffffffffffffffffffffffffffffffffffffff166340c10f1933610ab58464e8d4a510006111b7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b158015610b2057600080fd5b505af1158015610b34573d6000803e3d6000fd5b505050508064e8d4a51000610b4991906111b7565b3360009081526005602052604081208054909190610b689084906111a4565b909155505033600090815260056020526040902042600180830191909155600290910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055610bc38164e8d4a510006111b7565b3360009081526005602052604081206003018054909190610be59084906111a4565b90915550610bfa90508164e8d4a510006111b7565b60046000828254610c0b91906111a4565b925050819055506001806000828254610c2491906111a4565b925050819055508060086000828254610c3d91906111a4565b909155505050565b610c4d610fdc565b610c58600a826111a4565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cea91906110e6565b1015610d78576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f596f75206e656564206d6f7265207573646320746f205377617020666f72204d60448201527f48474420546f6b656e7320534f525259210000000000000000000000000000006064820152608401610561565b60065473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330610da3600a866111a4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4091906110ff565b610ea6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e73666572206f662075736463206661696c65640000000000000000006044820152606401610561565b60075473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33610ed48464e8d4a510006111b7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b158015610f3f57600080fd5b505af1158015610f53573d6000803e3d6000fd5b505050508060086000828254610f6991906111a4565b92505081905550600a60086000828254610f8391906111a4565b92505081905550600a806000828254610f9c91906111a4565b90915550610fb190508164e8d4a510006111b7565b60096000828254610fc2919061118b565b9250508190555060016003600082825461085291906111a4565b600260005403611048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610561565b6002600055565b803573ffffffffffffffffffffffffffffffffffffffff8116811461107357600080fd5b919050565b6000806040838503121561108b57600080fd5b6110948361104f565b91506110a26020840161104f565b90509250929050565b6000602082840312156110bd57600080fd5b5035919050565b6000602082840312156110d657600080fd5b6110df8261104f565b9392505050565b6000602082840312156110f857600080fd5b5051919050565b60006020828403121561111157600080fd5b815180151581146110df57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082611186577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8181038181111561119e5761119e611121565b92915050565b8082018082111561119e5761119e611121565b808202811582820484141761119e5761119e61112156fea164736f6c6343000814000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063c504b77111610066578063c504b77114610214578063e88493be14610227578063f071db5a14610230578063f46eccc41461023957600080fd5b80638da5cb5b146101b1578063a0712d68146101d8578063bdf4a5d8146101eb578063c2d65935146101f457600080fd5b80636eaa4c52116100d35780636eaa4c5214610184578063768aebde1461018d57806377b86de41461019557806388bbf88b1461019e57600080fd5b806311eac855146101055780633aeac4e11461014f5780635275c56a146101645780636a5809cc1461017b575b600080fd5b6006546101259073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61016261015d366004611078565b61029a565b005b61016d60035481565b604051908152602001610146565b61016d60085481565b61016d60095481565b61016d600a81565b61016d60045481565b6101626101ac3660046110ab565b610448565b6101257f000000000000000000000000000000000000000000000000000000000000000081565b6101626101e63660046110ab565b61085f565b61016d60025481565b6007546101259073ffffffffffffffffffffffffffffffffffffffff1681565b6101626102223660046110ab565b610c45565b61016d60015481565b61016d600a5481565b6102746102473660046110c4565b60056020526000908152604090208054600182015460028301546003909301549192909160ff9091169084565b604080519485526020850193909352901515918301919091526060820152608001610146565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146102dc57600080fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d91906110e6565b9050806000036103a9576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af115801561041e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044291906110ff565b50505050565b610450610fdc565b600a61046164e8d4a5100083611150565b61046b919061118b565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156104d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fd91906110e6565b101561056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4e6f7420656e6f756768207573646320696e207265736572766500000000000060448201526064015b60405180910390fd5b60075473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330610595600a866111a4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526064016020604051808303816000875af115801561060e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063291906110ff565b610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e73666572206f66204d484744206661696c65640000000000000000006044820152606401610561565b60065473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600a6106c864e8d4a5100086611150565b6106d2919061118b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044016020604051808303816000875af1158015610742573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076691906110ff565b6107cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e73666572206f662075736463206661696c65640000000000000000006044820152606401610561565b6107db64e8d4a5100082611150565b600860008282546107ec919061118b565b92505081905550806009600082825461080591906111a4565b92505081905550600a80600082825461081e91906111a4565b92505081905550600a6008600082825461083891906111a4565b9250508190555060016002600082825461085291906111a4565b9091555050600160005550565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156108ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f291906110e6565b1015610980576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f596f75206e656564206d6f7265205553444320746f204d696e74204d4847442060448201527f546f6b656e7320534f52525921000000000000000000000000000000000000006064820152608401610561565b6006546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af11580156109fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2191906110ff565b610a87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e73666572206f662055534443206661696c65640000000000000000006044820152606401610561565b60075473ffffffffffffffffffffffffffffffffffffffff166340c10f1933610ab58464e8d4a510006111b7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b158015610b2057600080fd5b505af1158015610b34573d6000803e3d6000fd5b505050508064e8d4a51000610b4991906111b7565b3360009081526005602052604081208054909190610b689084906111a4565b909155505033600090815260056020526040902042600180830191909155600290910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055610bc38164e8d4a510006111b7565b3360009081526005602052604081206003018054909190610be59084906111a4565b90915550610bfa90508164e8d4a510006111b7565b60046000828254610c0b91906111a4565b925050819055506001806000828254610c2491906111a4565b925050819055508060086000828254610c3d91906111a4565b909155505050565b610c4d610fdc565b610c58600a826111a4565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cea91906110e6565b1015610d78576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f596f75206e656564206d6f7265207573646320746f205377617020666f72204d60448201527f48474420546f6b656e7320534f525259210000000000000000000000000000006064820152608401610561565b60065473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330610da3600a866111a4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4091906110ff565b610ea6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e73666572206f662075736463206661696c65640000000000000000006044820152606401610561565b60075473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33610ed48464e8d4a510006111b7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b158015610f3f57600080fd5b505af1158015610f53573d6000803e3d6000fd5b505050508060086000828254610f6991906111a4565b92505081905550600a60086000828254610f8391906111a4565b92505081905550600a806000828254610f9c91906111a4565b90915550610fb190508164e8d4a510006111b7565b60096000828254610fc2919061118b565b9250508190555060016003600082825461085291906111a4565b600260005403611048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610561565b6002600055565b803573ffffffffffffffffffffffffffffffffffffffff8116811461107357600080fd5b919050565b6000806040838503121561108b57600080fd5b6110948361104f565b91506110a26020840161104f565b90509250929050565b6000602082840312156110bd57600080fd5b5035919050565b6000602082840312156110d657600080fd5b6110df8261104f565b9392505050565b6000602082840312156110f857600080fd5b5051919050565b60006020828403121561111157600080fd5b815180151581146110df57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082611186577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8181038181111561119e5761119e611121565b92915050565b8082018082111561119e5761119e611121565b808202811582820484141761119e5761119e61112156fea164736f6c6343000814000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "mint(uint256)": {
        "details": "Mints an equivalent amount of MhgdToken for the transferred USDC "
      },
      "swapMhgd(uint256)": {
        "details": "Swaps the MhgdToken to usdc less the swap fee."
      },
      "swapusdc(uint256)": {
        "details": "Swaps the usdc to MHGD plus the swap fee 0.01 usdc."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/MhgdUsdcMint.sol:MhgdUsdcMint",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2450,
        "contract": "contracts/MhgdUsdcMint.sol:MhgdUsdcMint",
        "label": "Total_Mint_Transactions",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2453,
        "contract": "contracts/MhgdUsdcMint.sol:MhgdUsdcMint",
        "label": "Total_Mhgd_Swap_Transactions",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2456,
        "contract": "contracts/MhgdUsdcMint.sol:MhgdUsdcMint",
        "label": "Total_Usdc_Swap_Transactions",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2458,
        "contract": "contracts/MhgdUsdcMint.sol:MhgdUsdcMint",
        "label": "Total_AllTime_Minted",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2463,
        "contract": "contracts/MhgdUsdcMint.sol:MhgdUsdcMint",
        "label": "minters",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Minter)2442_storage)"
      },
      {
        "astId": 2466,
        "contract": "contracts/MhgdUsdcMint.sol:MhgdUsdcMint",
        "label": "usdcToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20)842"
      },
      {
        "astId": 2469,
        "contract": "contracts/MhgdUsdcMint.sol:MhgdUsdcMint",
        "label": "mhgdToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IMhgdToken)2429"
      },
      {
        "astId": 2471,
        "contract": "contracts/MhgdUsdcMint.sol:MhgdUsdcMint",
        "label": "usdcReserve",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2473,
        "contract": "contracts/MhgdUsdcMint.sol:MhgdUsdcMint",
        "label": "mhgdReserve",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2475,
        "contract": "contracts/MhgdUsdcMint.sol:MhgdUsdcMint",
        "label": "feesCollected",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)842": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMhgdToken)2429": {
        "encoding": "inplace",
        "label": "contract IMhgdToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Minter)2442_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MhgdUsdcMint.Minter)",
        "numberOfBytes": "32",
        "value": "t_struct(Minter)2442_storage"
      },
      "t_struct(Minter)2442_storage": {
        "encoding": "inplace",
        "label": "struct MhgdUsdcMint.Minter",
        "members": [
          {
            "astId": 2435,
            "contract": "contracts/MhgdUsdcMint.sol:MhgdUsdcMint",
            "label": "minted",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2437,
            "contract": "contracts/MhgdUsdcMint.sol:MhgdUsdcMint",
            "label": "mintedAtBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2439,
            "contract": "contracts/MhgdUsdcMint.sol:MhgdUsdcMint",
            "label": "hasMintedBefore",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2441,
            "contract": "contracts/MhgdUsdcMint.sol:MhgdUsdcMint",
            "label": "minter_AllTime_Minted",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}