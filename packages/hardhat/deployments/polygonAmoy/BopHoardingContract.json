{
  "address": "0x23e1AC774ece39C2448D3a33c864E620a4ea2682",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Hoarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Pooled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "UnHoarded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "CheckBopBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "Check_Bop_Hoarded_Balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ClaimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "DonationPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hoarder",
          "type": "address"
        }
      ],
      "name": "GetHoardingingTimeInSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Hoard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "IncreaseHoard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Total_Hoarders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Total_Reward_Pool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Unhoard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hoarder",
          "type": "address"
        }
      ],
      "name": "calculateReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hoarders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "hoarded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeHoarded",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isHoarding",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "Total_AllTime_Hoarded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "Total_AllTime_Reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hoardingToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalHoarded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa93500242e8b8a447a852a4f84ddc18f85166e4f8a3e19db11cbad0b53a2b56c",
  "receipt": {
    "to": null,
    "from": "0xEf353eC37ed86CF28cfb29925748B202B51110C6",
    "contractAddress": "0x23e1AC774ece39C2448D3a33c864E620a4ea2682",
    "transactionIndex": 2,
    "gasUsed": "1349394",
    "logsBloom": "0x
    "blockHash": "0xf450a1dae3a4324b79a3cfdee9ac9d8ead1abea22bae79a4341ceba375d1b113",
    "transactionHash": "0xa93500242e8b8a447a852a4f84ddc18f85166e4f8a3e19db11cbad0b53a2b56c",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 7950830,
        "transactionHash": "0xa93500242e8b8a447a852a4f84ddc18f85166e4f8a3e19db11cbad0b53a2b56c",
        "address": "0x23e1AC774ece39C2448D3a33c864E620a4ea2682",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ef353ec37ed86cf28cfb29925748b202b51110c6"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xf450a1dae3a4324b79a3cfdee9ac9d8ead1abea22bae79a4341ceba375d1b113"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 7950830,
        "transactionHash": "0xa93500242e8b8a447a852a4f84ddc18f85166e4f8a3e19db11cbad0b53a2b56c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ef353ec37ed86cf28cfb29925748b202b51110c6",
          "0x0000000000000000000000006dc2dd54f24979ec26212794c71afefed722280c"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000730e6690c4e000000000000000000000000000000000000000000000000000a51bed0e4df87a50000000000000000000000000000000000000000000001aede90b8f77a8d81980000000000000000000000000000000000000000000000000a4a8dea7bd339a50000000000000000000000000000000000000000000001aede97e9dde399cf98",
        "logIndex": 9,
        "blockHash": "0xf450a1dae3a4324b79a3cfdee9ac9d8ead1abea22bae79a4341ceba375d1b113"
      }
    ],
    "blockNumber": 7950830,
    "cumulativeGasUsed": "1823509",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ab87f9cd9f293fb480768475a3c7587b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Hoarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Pooled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UnHoarded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"CheckBopBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"Check_Bop_Hoarded_Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DonationPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hoarder\",\"type\":\"address\"}],\"name\":\"GetHoardingingTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Hoard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"IncreaseHoard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Total_Hoarders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Total_Reward_Pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Unhoard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hoarder\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hoarders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hoarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeHoarded\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isHoarding\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"Total_AllTime_Hoarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Total_AllTime_Reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hoardingToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHoarded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BopHoardingContract.sol\":\"BopHoardingContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BopHoardingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n//The MHGN Hoarding contract was written by @moneyhoardermike with help from Polygon Co-Pilot.\\n//Its follows MHGN's Project 6 model and allows for Hoarding/Staking of the token address passed in constructor.\\n//This Contract is for BOP \\\"Blocks Of Passion Token\\\" hoarding.\\ncontract BopHoardingContract is Ownable, ReentrancyGuard {\\n    struct Hoarder {\\n        uint256 hoarded;\\n        uint256 timeHoarded;\\n        bool isHoarding;\\n        uint256 Total_AllTime_Hoarded;\\n        uint256 reward;\\n        uint256 Total_AllTime_Reward;\\n    }\\n    \\n    mapping (address => Hoarder) public hoarders;\\n    uint256 timeHoarded;\\n    uint256 public totalHoarded = 0;\\n    uint256 public Total_Hoarders = 0;\\n    uint256 public Total_Reward_Pool;\\n    ERC20 public hoardingToken;\\n\\n    event Hoarded(address indexed user, uint256 amount);\\n    event Pooled(address indexed user, uint256 amount);\\n    event UnHoarded(address indexed user);\\n\\n    constructor() {\\n        hoardingToken = ERC20(0x2C3aFc7E571cAF77C52505c46c33Bb493BF48264);  //Amoy\\n    }\\n    //Function to hoard tokens.\\n    function Hoard(uint256 _amount) external nonReentrant {\\n        require(!hoarders[msg.sender].isHoarding, \\\"Hoarder already exist\\\");\\n        require(hoardingToken.balanceOf(msg.sender) >= 0, \\\"You cannot hoard more tokens than you hold and hoarding is Non-ReEntry\\\");\\n        hoardingToken.transferFrom(msg.sender, address(this), _amount);\\n        hoarders[msg.sender].hoarded += _amount;\\n        hoarders[msg.sender].timeHoarded = block.timestamp;\\n        hoarders[msg.sender].isHoarding = true;\\n        hoarders[msg.sender].Total_AllTime_Hoarded += _amount;\\n        totalHoarded += _amount;\\n        Total_Hoarders += 1;\\n        emit Hoarded(msg.sender, _amount);\\n    }\\n    //Function to allow hoarders to increase their hoard.\\n    function IncreaseHoard(uint256 _amount) public  {\\n        require(hoardingToken.balanceOf(msg.sender) >= 0, \\\"You cannot hoard more tokens than you hold\\\");\\n        hoardingToken.transferFrom(msg.sender, address(this), _amount);\\n        hoarders[msg.sender].hoarded += _amount;\\n        hoarders[msg.sender].isHoarding = true;\\n        hoarders[msg.sender].Total_AllTime_Hoarded += _amount;\\n        totalHoarded += _amount;\\n        emit Hoarded(msg.sender, _amount);\\n    }\\n    //Function to calculate reward for current hoard.\\n    function calculateReward(address _hoarder) public view returns (uint256) {\\n        uint256 hoardingTime = block.timestamp - hoarders[_hoarder].timeHoarded;\\n        uint256 annualReward = (hoarders[_hoarder].hoarded * 6) / 100;\\n        uint256 reward = (annualReward * hoardingTime) / 31536000;  // 365 days in seconds\\n        return reward;\\n    }\\n    //Function to withdraw hoard and claim rewards\\n    function ClaimReward() public {\\n        require(hoarders[msg.sender].isHoarding == true, \\\"You cannot unhoard if you are not hoarding\\\");\\n        require(block.timestamp >= hoarders[msg.sender].timeHoarded + 6 days, \\\"You cannot Claim in the first 6 days of hoarding following the project 6 model\\\");\\n        hoardingToken.transfer(msg.sender, hoarders[msg.sender].hoarded);\\n        totalHoarded -= hoarders[msg.sender].hoarded;\\n        uint256 reward = calculateReward(msg.sender);\\n        require(hoardingToken.balanceOf(address(this)) >= reward, \\\"The contract does not have enough tokens to give you the reward\\\");\\n        hoardingToken.transfer(msg.sender, reward);\\n        hoarders[msg.sender].Total_AllTime_Reward += reward;\\n        hoarders[msg.sender].reward += reward;\\n        hoarders[msg.sender].hoarded = 0;\\n        hoarders[msg.sender].timeHoarded = 0;\\n        hoarders[msg.sender].isHoarding = false;\\n        Total_Hoarders -= 1;\\n        Total_Reward_Pool -= reward;\\n    }\\n    //Function to withdraw hoard and claim rewards\\n    function Unhoard() public {\\n        require(hoarders[msg.sender].isHoarding == true, \\\"You cannot unhoard if you are not hoarding\\\");\\n        require(block.timestamp >= hoarders[msg.sender].timeHoarded + 6 minutes, \\\"You cannot unhoard in the first 6 minutes of hoardinging following the project 6 model\\\");\\n        hoardingToken.transfer(msg.sender, hoarders[msg.sender].hoarded);\\n        totalHoarded -= hoarders[msg.sender].hoarded;\\n        uint256 reward = calculateReward(msg.sender);\\n        require(hoardingToken.balanceOf(address(this)) >= reward, \\\"The contract does not have enough tokens to give you the reward\\\");\\n        hoardingToken.transfer(msg.sender, reward);\\n        hoarders[msg.sender].Total_AllTime_Reward += reward;\\n        hoarders[msg.sender].reward += reward;\\n        hoarders[msg.sender].hoarded = 0;\\n        hoarders[msg.sender].timeHoarded = 0;\\n        hoarders[msg.sender].isHoarding = false;\\n        Total_Hoarders -= 1;\\n        Total_Reward_Pool -= reward;\\n    }\\n    //Read only function that checks the hoarders hoarding time in seconds.\\n    function GetHoardingingTimeInSeconds(address _hoarder) public view returns (uint256) {\\n        return block.timestamp - hoarders[_hoarder].timeHoarded;\\n    }\\n    //Read only function that checks the users non-hoarding balance.\\n    function CheckBopBalance(address _owner) public view returns (uint256) {\\n        return hoardingToken.balanceOf(_owner);\\n    }\\n        //Read only function that checks the users hoarding balance.\\n    function Check_Bop_Hoarded_Balance(address _owner) public view returns (uint256) {\\n        return hoarders[_owner].hoarded;\\n    }\\n    //Transfers tokens to the hoarding rewards pool as a donation the tokens can't be withdrawn!\\n    function DonationPool(uint256 _amount) public  {\\n        require(hoardingToken.balanceOf(msg.sender) >= 0, \\\"You cannot pool more tokens than you hold\\\");\\n        hoardingToken.transferFrom(msg.sender, address(this), _amount);\\n        Total_Reward_Pool += _amount;\\n        emit Pooled(msg.sender, _amount);\\n    }\\n}\",\"keccak256\":\"0xc4203ee0c6db48cc8f2cfb2dcc18247dfcfaee3120fd7d80612e53f03d8ee464\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600455600060055534801561001a57600080fd5b5061002433610053565b60018055600780546001600160a01b031916732c3afc7e571caf77c52505c46c33bb493bf482641790556100a3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611645806100b26000396000f3fe608060405234801561001057600080fd5b506004361061011a5760003560e01c806379372f9a116100b2578063a886aafe11610081578063cebc819f11610066578063cebc819f146102b7578063d82e3962146102d7578063f2fde38b146102ea57600080fd5b8063a886aafe1461029b578063a98cb7f9146102a457600080fd5b806379372f9a146101c55780638da5cb5b146101cd5780639ce521b31461020c578063a06d65ad1461028857600080fd5b80633e0dc721116100ee5780633e0dc72114610199578063559b4ca3146101a15780635a4d2eaa146101aa578063715018a6146101bd57600080fd5b8062f5bf241461011f5780630afa1dd314610145578063355f60d21461014e5780633609157c14610163575b600080fd5b61013261012d366004611500565b6102fd565b6040519081526020015b60405180910390f35b61013260055481565b61016161015c36600461153d565b610398565b005b610132610171366004611500565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b610161610704565b61013260045481565b6101616101b836600461153d565b610be8565b610161610dfb565b610161610e0f565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161013c565b61025561021a366004611500565b600260208190526000918252604090912080546001820154928201546003830154600484015460059094015492949360ff9092169290919086565b604080519687526020870195909552921515938501939093526060840152608083019190915260a082015260c00161013c565b61016161029636600461153d565b610f8c565b61013260065481565b6101326102b2366004611500565b611213565b6007546101e79073ffffffffffffffffffffffffffffffffffffffff1681565b6101326102e5366004611500565b611246565b6101616102f8366004611500565b6112e3565b6007546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015260009216906370a0823190602401602060405180830381865afa15801561036e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103929190611556565b92915050565b6103a0611397565b336000908152600260208190526040909120015460ff1615610423576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f486f617264657220616c7265616479206578697374000000000000000000000060448201526064015b60405180910390fd5b6007546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b69190611556565b101561056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604660248201527f596f752063616e6e6f7420686f617264206d6f726520746f6b656e732074686160448201527f6e20796f7520686f6c6420616e6420686f617264696e67206973204e6f6e2d5260648201527f65456e7472790000000000000000000000000000000000000000000000000000608482015260a40161041a565b6007546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af11580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b919061156f565b50336000908152600260205260408120805483929061062b9084906115c0565b909155505033600090815260026020819052604082204260018083019190915591810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016909217909155600301805483929061068b9084906115c0565b9250508190555080600460008282546106a491906115c0565b925050819055506001600560008282546106be91906115c0565b909155505060405181815233907f8719c6d42263b6c9964f8fd07267a1296b19fd97340b880de23e57cab3f290a99060200160405180910390a261070160018055565b50565b336000908152600260208190526040909120015460ff1615156001146107ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f596f752063616e6e6f7420756e686f61726420696620796f7520617265206e6f60448201527f7420686f617264696e6700000000000000000000000000000000000000000000606482015260840161041a565b336000908152600260205260409020600101546107cb906101686115c0565b421015610880576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605660248201527f596f752063616e6e6f7420756e686f61726420696e207468652066697273742060448201527f36206d696e75746573206f6620686f617264696e67696e6720666f6c6c6f776960648201527f6e67207468652070726f6a6563742036206d6f64656c00000000000000000000608482015260a40161041a565b60075433600081815260026020526040908190205490517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810192909252602482015273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906044016020604051808303816000875af1158015610908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092c919061156f565b503360009081526002602052604081205460048054919290916109509084906115d3565b909155506000905061096133611246565b6007546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152919250829173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156109d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f89190611556565b1015610a86576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f54686520636f6e747261637420646f6573206e6f74206861766520656e6f756760448201527f6820746f6b656e7320746f206769766520796f75207468652072657761726400606482015260840161041a565b6007546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906044016020604051808303816000875af1158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b21919061156f565b503360009081526002602052604081206005018054839290610b449084906115c0565b90915550503360009081526002602052604081206004018054839290610b6b9084906115c0565b909155505033600090815260026020819052604082208281556001808201849055910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556005805491929091610bc79084906115d3565b925050819055508060066000828254610be091906115d3565b909155505050565b6007546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b9190611556565b1015610d09576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f596f752063616e6e6f7420706f6f6c206d6f726520746f6b656e73207468616e60448201527f20796f7520686f6c640000000000000000000000000000000000000000000000606482015260840161041a565b6007546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af1158015610d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daa919061156f565b508060066000828254610dbd91906115c0565b909155505060405181815233907f423eb3fc7f00914fa251f391851045c36a87052e7afb63e89ad6991b56a6c617906020015b60405180910390a250565b610e0361140a565b610e0d600061148b565b565b336000908152600260208190526040909120015460ff161515600114610eb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f596f752063616e6e6f7420756e686f61726420696620796f7520617265206e6f60448201527f7420686f617264696e6700000000000000000000000000000000000000000000606482015260840161041a565b33600090815260026020526040902060010154610ed7906207e9006115c0565b421015610880576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604e60248201527f596f752063616e6e6f7420436c61696d20696e2074686520666972737420362060448201527f64617973206f6620686f617264696e6720666f6c6c6f77696e6720746865207060648201527f726f6a6563742036206d6f64656c000000000000000000000000000000000000608482015260a40161041a565b6007546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101f9190611556565b10156110ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f596f752063616e6e6f7420686f617264206d6f726520746f6b656e732074686160448201527f6e20796f7520686f6c6400000000000000000000000000000000000000000000606482015260840161041a565b6007546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af115801561112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114e919061156f565b50336000908152600260205260408120805483929061116e9084906115c0565b9091555050336000908152600260208190526040822090810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560030180548392906111c39084906115c0565b9250508190555080600460008282546111dc91906115c0565b909155505060405181815233907f8719c6d42263b6c9964f8fd07267a1296b19fd97340b880de23e57cab3f290a990602001610df0565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604081206001015461039290426115d3565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040812060010154819061127b90426115d3565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260026020526040812054919250906064906112b39060066115e6565b6112bd91906115fd565b905060006301e133806112d084846115e6565b6112da91906115fd565b95945050505050565b6112eb61140a565b73ffffffffffffffffffffffffffffffffffffffff811661138e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161041a565b6107018161148b565b600260015403611403576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161041a565b6002600155565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161041a565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561151257600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461153657600080fd5b9392505050565b60006020828403121561154f57600080fd5b5035919050565b60006020828403121561156857600080fd5b5051919050565b60006020828403121561158157600080fd5b8151801515811461153657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561039257610392611591565b8181038181111561039257610392611591565b808202811582820484141761039257610392611591565b600082611633577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea164736f6c6343000814000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011a5760003560e01c806379372f9a116100b2578063a886aafe11610081578063cebc819f11610066578063cebc819f146102b7578063d82e3962146102d7578063f2fde38b146102ea57600080fd5b8063a886aafe1461029b578063a98cb7f9146102a457600080fd5b806379372f9a146101c55780638da5cb5b146101cd5780639ce521b31461020c578063a06d65ad1461028857600080fd5b80633e0dc721116100ee5780633e0dc72114610199578063559b4ca3146101a15780635a4d2eaa146101aa578063715018a6146101bd57600080fd5b8062f5bf241461011f5780630afa1dd314610145578063355f60d21461014e5780633609157c14610163575b600080fd5b61013261012d366004611500565b6102fd565b6040519081526020015b60405180910390f35b61013260055481565b61016161015c36600461153d565b610398565b005b610132610171366004611500565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b610161610704565b61013260045481565b6101616101b836600461153d565b610be8565b610161610dfb565b610161610e0f565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161013c565b61025561021a366004611500565b600260208190526000918252604090912080546001820154928201546003830154600484015460059094015492949360ff9092169290919086565b604080519687526020870195909552921515938501939093526060840152608083019190915260a082015260c00161013c565b61016161029636600461153d565b610f8c565b61013260065481565b6101326102b2366004611500565b611213565b6007546101e79073ffffffffffffffffffffffffffffffffffffffff1681565b6101326102e5366004611500565b611246565b6101616102f8366004611500565b6112e3565b6007546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015260009216906370a0823190602401602060405180830381865afa15801561036e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103929190611556565b92915050565b6103a0611397565b336000908152600260208190526040909120015460ff1615610423576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f486f617264657220616c7265616479206578697374000000000000000000000060448201526064015b60405180910390fd5b6007546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b69190611556565b101561056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604660248201527f596f752063616e6e6f7420686f617264206d6f726520746f6b656e732074686160448201527f6e20796f7520686f6c6420616e6420686f617264696e67206973204e6f6e2d5260648201527f65456e7472790000000000000000000000000000000000000000000000000000608482015260a40161041a565b6007546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af11580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b919061156f565b50336000908152600260205260408120805483929061062b9084906115c0565b909155505033600090815260026020819052604082204260018083019190915591810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016909217909155600301805483929061068b9084906115c0565b9250508190555080600460008282546106a491906115c0565b925050819055506001600560008282546106be91906115c0565b909155505060405181815233907f8719c6d42263b6c9964f8fd07267a1296b19fd97340b880de23e57cab3f290a99060200160405180910390a261070160018055565b50565b336000908152600260208190526040909120015460ff1615156001146107ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f596f752063616e6e6f7420756e686f61726420696620796f7520617265206e6f60448201527f7420686f617264696e6700000000000000000000000000000000000000000000606482015260840161041a565b336000908152600260205260409020600101546107cb906101686115c0565b421015610880576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605660248201527f596f752063616e6e6f7420756e686f61726420696e207468652066697273742060448201527f36206d696e75746573206f6620686f617264696e67696e6720666f6c6c6f776960648201527f6e67207468652070726f6a6563742036206d6f64656c00000000000000000000608482015260a40161041a565b60075433600081815260026020526040908190205490517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810192909252602482015273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906044016020604051808303816000875af1158015610908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092c919061156f565b503360009081526002602052604081205460048054919290916109509084906115d3565b909155506000905061096133611246565b6007546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152919250829173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156109d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f89190611556565b1015610a86576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f54686520636f6e747261637420646f6573206e6f74206861766520656e6f756760448201527f6820746f6b656e7320746f206769766520796f75207468652072657761726400606482015260840161041a565b6007546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906044016020604051808303816000875af1158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b21919061156f565b503360009081526002602052604081206005018054839290610b449084906115c0565b90915550503360009081526002602052604081206004018054839290610b6b9084906115c0565b909155505033600090815260026020819052604082208281556001808201849055910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556005805491929091610bc79084906115d3565b925050819055508060066000828254610be091906115d3565b909155505050565b6007546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b9190611556565b1015610d09576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f596f752063616e6e6f7420706f6f6c206d6f726520746f6b656e73207468616e60448201527f20796f7520686f6c640000000000000000000000000000000000000000000000606482015260840161041a565b6007546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af1158015610d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daa919061156f565b508060066000828254610dbd91906115c0565b909155505060405181815233907f423eb3fc7f00914fa251f391851045c36a87052e7afb63e89ad6991b56a6c617906020015b60405180910390a250565b610e0361140a565b610e0d600061148b565b565b336000908152600260208190526040909120015460ff161515600114610eb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f596f752063616e6e6f7420756e686f61726420696620796f7520617265206e6f60448201527f7420686f617264696e6700000000000000000000000000000000000000000000606482015260840161041a565b33600090815260026020526040902060010154610ed7906207e9006115c0565b421015610880576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604e60248201527f596f752063616e6e6f7420436c61696d20696e2074686520666972737420362060448201527f64617973206f6620686f617264696e6720666f6c6c6f77696e6720746865207060648201527f726f6a6563742036206d6f64656c000000000000000000000000000000000000608482015260a40161041a565b6007546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101f9190611556565b10156110ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f596f752063616e6e6f7420686f617264206d6f726520746f6b656e732074686160448201527f6e20796f7520686f6c6400000000000000000000000000000000000000000000606482015260840161041a565b6007546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af115801561112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114e919061156f565b50336000908152600260205260408120805483929061116e9084906115c0565b9091555050336000908152600260208190526040822090810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560030180548392906111c39084906115c0565b9250508190555080600460008282546111dc91906115c0565b909155505060405181815233907f8719c6d42263b6c9964f8fd07267a1296b19fd97340b880de23e57cab3f290a990602001610df0565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604081206001015461039290426115d3565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040812060010154819061127b90426115d3565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260026020526040812054919250906064906112b39060066115e6565b6112bd91906115fd565b905060006301e133806112d084846115e6565b6112da91906115fd565b95945050505050565b6112eb61140a565b73ffffffffffffffffffffffffffffffffffffffff811661138e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161041a565b6107018161148b565b600260015403611403576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161041a565b6002600155565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161041a565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561151257600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461153657600080fd5b9392505050565b60006020828403121561154f57600080fd5b5035919050565b60006020828403121561156857600080fd5b5051919050565b60006020828403121561158157600080fd5b8151801515811461153657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561039257610392611591565b8181038181111561039257610392611591565b808202811582820484141761039257610392611591565b600082611633577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea164736f6c6343000814000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BopHoardingContract.sol:BopHoardingContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/BopHoardingContract.sol:BopHoardingContract",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 916,
        "contract": "contracts/BopHoardingContract.sol:BopHoardingContract",
        "label": "hoarders",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Hoarder)911_storage)"
      },
      {
        "astId": 918,
        "contract": "contracts/BopHoardingContract.sol:BopHoardingContract",
        "label": "timeHoarded",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 921,
        "contract": "contracts/BopHoardingContract.sol:BopHoardingContract",
        "label": "totalHoarded",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 924,
        "contract": "contracts/BopHoardingContract.sol:BopHoardingContract",
        "label": "Total_Hoarders",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 926,
        "contract": "contracts/BopHoardingContract.sol:BopHoardingContract",
        "label": "Total_Reward_Pool",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 929,
        "contract": "contracts/BopHoardingContract.sol:BopHoardingContract",
        "label": "hoardingToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ERC20)764"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)764": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Hoarder)911_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BopHoardingContract.Hoarder)",
        "numberOfBytes": "32",
        "value": "t_struct(Hoarder)911_storage"
      },
      "t_struct(Hoarder)911_storage": {
        "encoding": "inplace",
        "label": "struct BopHoardingContract.Hoarder",
        "members": [
          {
            "astId": 900,
            "contract": "contracts/BopHoardingContract.sol:BopHoardingContract",
            "label": "hoarded",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 902,
            "contract": "contracts/BopHoardingContract.sol:BopHoardingContract",
            "label": "timeHoarded",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 904,
            "contract": "contracts/BopHoardingContract.sol:BopHoardingContract",
            "label": "isHoarding",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 906,
            "contract": "contracts/BopHoardingContract.sol:BopHoardingContract",
            "label": "Total_AllTime_Hoarded",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 908,
            "contract": "contracts/BopHoardingContract.sol:BopHoardingContract",
            "label": "reward",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 910,
            "contract": "contracts/BopHoardingContract.sol:BopHoardingContract",
            "label": "Total_AllTime_Reward",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}