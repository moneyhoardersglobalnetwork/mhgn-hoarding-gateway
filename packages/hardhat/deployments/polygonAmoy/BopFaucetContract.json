{
  "address": "0x832deC3B7777E45C2B07859Ac62435872C5B8263",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GotDripped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Pooled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "DonationPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Limit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Total_Donated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Total_Drip_Pool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Total_Dripped",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "drippers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timeDripped",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "gotDripped",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "Total_AllTime_Dripped",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "driptoken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xee6a8148292c55d25186d78c1a7f0eed2c4e6880eedc248fd930177a08fe22ec",
  "receipt": {
    "to": null,
    "from": "0xEf353eC37ed86CF28cfb29925748B202B51110C6",
    "contractAddress": "0x832deC3B7777E45C2B07859Ac62435872C5B8263",
    "transactionIndex": 0,
    "gasUsed": "790458",
    "logsBloom": "0x
    "blockHash": "0x73dbdb02ce7204bf13be14fd273895b312db39a02cd37fa9e92c19b0cef552c6",
    "transactionHash": "0xee6a8148292c55d25186d78c1a7f0eed2c4e6880eedc248fd930177a08fe22ec",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7950826,
        "transactionHash": "0xee6a8148292c55d25186d78c1a7f0eed2c4e6880eedc248fd930177a08fe22ec",
        "address": "0x832deC3B7777E45C2B07859Ac62435872C5B8263",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ef353ec37ed86cf28cfb29925748b202b51110c6"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x73dbdb02ce7204bf13be14fd273895b312db39a02cd37fa9e92c19b0cef552c6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7950826,
        "transactionHash": "0xee6a8148292c55d25186d78c1a7f0eed2c4e6880eedc248fd930177a08fe22ec",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ef353ec37ed86cf28cfb29925748b202b51110c6",
          "0x0000000000000000000000006dc2dd54f24979ec26212794c71afefed722280c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000018c4d9e467a2000000000000000000000000000000000000000000000000000a6a83aac9fc158b0000000000000000000000000000000000000000000001aede6444a70f7c543d0000000000000000000000000000000000000000000000000a51bed0e594738b0000000000000000000000000000000000000000000001aede7d0980f3e3f63d",
        "logIndex": 1,
        "blockHash": "0x73dbdb02ce7204bf13be14fd273895b312db39a02cd37fa9e92c19b0cef552c6"
      }
    ],
    "blockNumber": 7950826,
    "cumulativeGasUsed": "790458",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2C3aFc7E571cAF77C52505c46c33Bb493BF48264"
  ],
  "numDeployments": 1,
  "solcInputHash": "a78c57ca126e8a84fe9be272a164e444",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GotDripped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Pooled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DonationPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Total_Donated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Total_Drip_Pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Total_Dripped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"drippers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timeDripped\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"gotDripped\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"Total_AllTime_Dripped\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"driptoken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@moneyhoardermike with help from Polygon Copilot\",\"kind\":\"dev\",\"methods\":{\"drip()\":{\"details\":\"Owner must have enough balance of token to use this function.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"BOP Token Faucet Contract a.k.a \\\"The gift that keeps on giving!\\\"\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"drip()\":{\"notice\":\"This function allows user to get 600 BOP tokens.\"}},\"notice\":\"This contract is a faucet which allows to get random number of given ERC20 token in between 1 & 6000 or a set amount by deployer We plan to integrate chainlink VRF Raffle.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BopFaucetContract.sol\":\"BopFaucetContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BopFaucetContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\n/**\\n * @title BOP Token Faucet Contract a.k.a \\\"The gift that keeps on giving!\\\"\\n * @author @moneyhoardermike with help from Polygon Copilot\\n * @notice This contract is a faucet which allows to get random number of given ERC20 token in between 1 & 6000 or a set amount by deployer We plan to integrate chainlink VRF Raffle.\\n *//*\\n This M.H.G.N  contract was written by @moneyhoardermike with help from Polygon Co-Pilot.\\nIts follows MHGN's Project 6 model drips 600 BOP tokens at time for a max of 6000 BOP Tokens.\\nIt also requires users balance to be zero to prevent spamming and encourage \\nhoarding, swapping, or donating BOP tokens where you can then with a zero wallet balance catch a drip from the faucet. \\nThis Contract is for BOP \\\"Blocks Of Passion Token\\\" a.k. BOP by M.H.G.N.*/\\ncontract BopFaucetContract is Ownable {\\n   struct Dripper {\\n        uint256 timeDripped;\\n        bool gotDripped;\\n        uint256 Total_AllTime_Dripped;\\n    }\\n\\n\\n    mapping (address => Dripper) public drippers;\\n    ERC20 public driptoken;\\n    event GotDripped(address indexed user, uint256 amount);\\n    event Pooled(address indexed user, uint256 amount);\\n    \\n    constructor(address _tokenAddress) {\\n        driptoken = ERC20(_tokenAddress);\\n    }\\n    uint256 internal GotDrippedMax = 5400000000000000000000;  //We use 5400 as max this should allow 6000 tokens to drip before revert and error message\\n    uint256 public Limit = 6000000000000000000000; // We make the limt publicly visible here\\n    uint256 public Total_Donated;\\n    uint256 public Total_Drip_Pool;\\n    uint256 public Total_Dripped;\\n    \\n    /**\\n    * @notice This function allows user to get 600 BOP tokens.\\n    * @dev Owner must have enough balance of token to use this function.\\n    */\\n    function drip() public {\\n        uint256 _amount = 600000000000000000000;\\n        require(driptoken.balanceOf(address(this)) >= _amount, \\\"Not enough tokens in faucet to drip\\\");\\n        require(driptoken.balanceOf(msg.sender) <= 6, \\\" This faucet only drips to the less fortunate, on-boarders or those hoarding their total balance if you have tokens already you could donate, swap, or hoard them to use faucet again\\\");\\n        require(drippers[msg.sender].Total_AllTime_Dripped <= GotDrippedMax, \\\"You reached the max drips of 6000\\\");\\n        driptoken.transfer(msg.sender, _amount);\\n        drippers[msg.sender].gotDripped = true;\\n        drippers[msg.sender].timeDripped = block.timestamp;\\n        drippers[msg.sender].Total_AllTime_Dripped += _amount;\\n        \\n        Total_Drip_Pool -= _amount;\\n        Total_Dripped += _amount;\\n        emit GotDripped(msg.sender, _amount);\\n    }\\n\\n     //Transfers tokens to the hoarding rewards pool as a donation the tokens can't be withdrawn!\\n    function DonationPool(uint256 _amount) public  {\\n        require(driptoken.balanceOf(msg.sender) >= 0, \\\"You cannot pool more tokens than you hold\\\");\\n        driptoken.transferFrom(msg.sender, address(this), _amount);\\n        Total_Drip_Pool += _amount;\\n        Total_Donated += _amount;\\n        emit Pooled(msg.sender, _amount);\\n    }\\n\\n/*\\nExperiment with on-chain randomness the chainlink Raffle Contract should be integrated keeping a 6000 token limit\\nWork on tracking the donors activity more like putting total_donated in Struct \\nWarning: Since the VM version paris, \\\"difficulty\\\" was replaced by \\\"prevrandao\\\", which now returns a random number based on the beacon chain.\\n  --> contracts/BopFaucetContract.sol:61:65:\\n   |\\n61 |         return uint(keccak256(abi.encodePacked(block.timestamp, block.difficulty)))%6000; Switch back for live\\n    function _random() private view returns (uint) {\\n        return uint(keccak256(abi.encodePacked(block.timestamp, block.prevrandao)))%600000000000000000000;\\n    }*/\\n}\",\"keccak256\":\"0xac86cad4526b92f5a1d46b27e20449ed7c0d10cea88c49347719241ebabe2499\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052690124bc0ddd92e560000060035569014542ba12a337c0000060045534801561002c57600080fd5b50604051610cc2380380610cc283398101604081905261004b916100c9565b61005433610079565b600280546001600160a01b0319166001600160a01b03929092169190911790556100f9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100db57600080fd5b81516001600160a01b03811681146100f257600080fd5b9392505050565b610bba806101086000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80638da5cb5b11610081578063e62e3e1e1161005b578063e62e3e1e14610169578063ea838aee14610189578063f2fde38b146101d857600080fd5b80638da5cb5b146101195780639f678cca14610158578063cc0860b51461016057600080fd5b80635a4d2eaa116100b25780635a4d2eaa146100f3578063715018a6146101085780637f479e3c1461011057600080fd5b80630e6d429d146100ce5780634f057506146100ea575b600080fd5b6100d760075481565b6040519081526020015b60405180910390f35b6100d760045481565b610106610101366004610ac1565b6101eb565b005b61010661041c565b6100d760065481565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e1565b610106610430565b6100d760055481565b6002546101339073ffffffffffffffffffffffffffffffffffffffff1681565b6101bd610197366004610ada565b600160208190526000918252604090912080549181015460029091015460ff9091169083565b604080519384529115156020840152908201526060016100e1565b6101066101e6366004610ada565b610914565b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa15801561025a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027e9190610b17565b1015610311576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f596f752063616e6e6f7420706f6f6c206d6f726520746f6b656e73207468616e60448201527f20796f7520686f6c64000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6002546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af115801561038e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b29190610b30565b5080600660008282546103c59190610b81565b9250508190555080600560008282546103de9190610b81565b909155505060405181815233907f423eb3fc7f00914fa251f391851045c36a87052e7afb63e89ad6991b56a6c617906020015b60405180910390a250565b6104246109cb565b61042e6000610a4c565b565b6002546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152682086ac35105260000091829173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156104ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cf9190610b17565b101561055d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4e6f7420656e6f75676820746f6b656e7320696e2066617563657420746f206460448201527f72697000000000000000000000000000000000000000000000000000000000006064820152608401610308565b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015260069173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f09190610b17565b1115610717576040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260b560248201527f205468697320666175636574206f6e6c7920647269707320746f20746865206c60448201527f65737320666f7274756e6174652c206f6e2d626f617264657273206f7220746860648201527f6f736520686f617264696e6720746865697220746f74616c2062616c616e636560848201527f20696620796f75206861766520746f6b656e7320616c726561647920796f752060a48201527f636f756c6420646f6e6174652c20737761702c206f7220686f6172642074686560c48201527f6d20746f207573652066617563657420616761696e000000000000000000000060e482015261010401610308565b6003543360009081526001602052604090206002015411156107bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f596f75207265616368656420746865206d6178206472697073206f662036303060448201527f30000000000000000000000000000000000000000000000000000000000000006064820152608401610308565b6002546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906044016020604051808303816000875af1158015610832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108569190610b30565b50336000908152600160208190526040822080820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690921790915542815560020180548392906108ab908490610b81565b9250508190555080600660008282546108c49190610b9a565b9250508190555080600760008282546108dd9190610b81565b909155505060405181815233907f0ac1452b69e769dcaadec371591a3059dd6b6d306d09e0f9d6694cefd78a5ed490602001610411565b61091c6109cb565b73ffffffffffffffffffffffffffffffffffffffff81166109bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610308565b6109c881610a4c565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461042e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610308565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610ad357600080fd5b5035919050565b600060208284031215610aec57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610b1057600080fd5b9392505050565b600060208284031215610b2957600080fd5b5051919050565b600060208284031215610b4257600080fd5b81518015158114610b1057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610b9457610b94610b52565b92915050565b81810381811115610b9457610b94610b5256fea164736f6c6343000814000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80638da5cb5b11610081578063e62e3e1e1161005b578063e62e3e1e14610169578063ea838aee14610189578063f2fde38b146101d857600080fd5b80638da5cb5b146101195780639f678cca14610158578063cc0860b51461016057600080fd5b80635a4d2eaa116100b25780635a4d2eaa146100f3578063715018a6146101085780637f479e3c1461011057600080fd5b80630e6d429d146100ce5780634f057506146100ea575b600080fd5b6100d760075481565b6040519081526020015b60405180910390f35b6100d760045481565b610106610101366004610ac1565b6101eb565b005b61010661041c565b6100d760065481565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e1565b610106610430565b6100d760055481565b6002546101339073ffffffffffffffffffffffffffffffffffffffff1681565b6101bd610197366004610ada565b600160208190526000918252604090912080549181015460029091015460ff9091169083565b604080519384529115156020840152908201526060016100e1565b6101066101e6366004610ada565b610914565b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa15801561025a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027e9190610b17565b1015610311576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f596f752063616e6e6f7420706f6f6c206d6f726520746f6b656e73207468616e60448201527f20796f7520686f6c64000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6002546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af115801561038e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b29190610b30565b5080600660008282546103c59190610b81565b9250508190555080600560008282546103de9190610b81565b909155505060405181815233907f423eb3fc7f00914fa251f391851045c36a87052e7afb63e89ad6991b56a6c617906020015b60405180910390a250565b6104246109cb565b61042e6000610a4c565b565b6002546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152682086ac35105260000091829173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156104ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cf9190610b17565b101561055d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4e6f7420656e6f75676820746f6b656e7320696e2066617563657420746f206460448201527f72697000000000000000000000000000000000000000000000000000000000006064820152608401610308565b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015260069173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f09190610b17565b1115610717576040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260b560248201527f205468697320666175636574206f6e6c7920647269707320746f20746865206c60448201527f65737320666f7274756e6174652c206f6e2d626f617264657273206f7220746860648201527f6f736520686f617264696e6720746865697220746f74616c2062616c616e636560848201527f20696620796f75206861766520746f6b656e7320616c726561647920796f752060a48201527f636f756c6420646f6e6174652c20737761702c206f7220686f6172642074686560c48201527f6d20746f207573652066617563657420616761696e000000000000000000000060e482015261010401610308565b6003543360009081526001602052604090206002015411156107bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f596f75207265616368656420746865206d6178206472697073206f662036303060448201527f30000000000000000000000000000000000000000000000000000000000000006064820152608401610308565b6002546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906044016020604051808303816000875af1158015610832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108569190610b30565b50336000908152600160208190526040822080820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690921790915542815560020180548392906108ab908490610b81565b9250508190555080600660008282546108c49190610b9a565b9250508190555080600760008282546108dd9190610b81565b909155505060405181815233907f0ac1452b69e769dcaadec371591a3059dd6b6d306d09e0f9d6694cefd78a5ed490602001610411565b61091c6109cb565b73ffffffffffffffffffffffffffffffffffffffff81166109bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610308565b6109c881610a4c565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461042e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610308565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610ad357600080fd5b5035919050565b600060208284031215610aec57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610b1057600080fd5b9392505050565b600060208284031215610b2957600080fd5b5051919050565b600060208284031215610b4257600080fd5b81518015158114610b1057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610b9457610b94610b52565b92915050565b81810381811115610b9457610b94610b5256fea164736f6c6343000814000a",
  "devdoc": {
    "author": "@moneyhoardermike with help from Polygon Copilot",
    "kind": "dev",
    "methods": {
      "drip()": {
        "details": "Owner must have enough balance of token to use this function."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "BOP Token Faucet Contract a.k.a \"The gift that keeps on giving!\"",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "drip()": {
        "notice": "This function allows user to get 600 BOP tokens."
      }
    },
    "notice": "This contract is a faucet which allows to get random number of given ERC20 token in between 1 & 6000 or a set amount by deployer We plan to integrate chainlink VRF Raffle.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1229,
        "contract": "contracts/BopFaucetContract.sol:BopFaucetContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7268,
        "contract": "contracts/BopFaucetContract.sol:BopFaucetContract",
        "label": "drippers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Dripper)7263_storage)"
      },
      {
        "astId": 7271,
        "contract": "contracts/BopFaucetContract.sol:BopFaucetContract",
        "label": "driptoken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ERC20)2171"
      },
      {
        "astId": 7298,
        "contract": "contracts/BopFaucetContract.sol:BopFaucetContract",
        "label": "GotDrippedMax",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7301,
        "contract": "contracts/BopFaucetContract.sol:BopFaucetContract",
        "label": "Limit",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7303,
        "contract": "contracts/BopFaucetContract.sol:BopFaucetContract",
        "label": "Total_Donated",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7305,
        "contract": "contracts/BopFaucetContract.sol:BopFaucetContract",
        "label": "Total_Drip_Pool",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7307,
        "contract": "contracts/BopFaucetContract.sol:BopFaucetContract",
        "label": "Total_Dripped",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)2171": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Dripper)7263_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BopFaucetContract.Dripper)",
        "numberOfBytes": "32",
        "value": "t_struct(Dripper)7263_storage"
      },
      "t_struct(Dripper)7263_storage": {
        "encoding": "inplace",
        "label": "struct BopFaucetContract.Dripper",
        "members": [
          {
            "astId": 7258,
            "contract": "contracts/BopFaucetContract.sol:BopFaucetContract",
            "label": "timeDripped",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7260,
            "contract": "contracts/BopFaucetContract.sol:BopFaucetContract",
            "label": "gotDripped",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 7262,
            "contract": "contracts/BopFaucetContract.sol:BopFaucetContract",
            "label": "Total_AllTime_Dripped",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}